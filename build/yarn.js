var s=new Map;async function d(c){let a=await c("yarn config get cacheFolder");return a.substring(0,a.indexOf(".yarn"))}var i=c=>c.endsWith("/")?c.slice(0,-1):c,k={name:"yarn",description:"",generateSpec:async(c,a)=>{let r=await a("pwd");if(s.has("workspaceRoot")&&!i(r).includes(i(s.get("workspaceRoot")))&&(s.delete("path"),s.delete("workspaceRoot"),s.delete("scripts")),!s.has("path")){let t=await d(a);s.set("path",r),s.set("workspaceRoot",t),s.set("scripts",[])}if(s.has("scripts")&&s.get("scripts").length!==0)return{name:"yarn",description:"",subcommands:s.get("scripts").map(t=>({name:t,description:"",icon:"\u2728"}))};let p=(await a("yarn workspaces list --json -v")).split(`
`).filter(t=>t!=="").map(t=>JSON.parse(t)),l=await Promise.all(p.map(async t=>{let e=await a(`cat ${s.get("workspaceRoot")}${t.location}/package.json`);try{return JSON.parse(e).scripts}catch{return[]}})),u=await a("cat package.json"),n=[];try{n=JSON.parse(u).scripts}catch{n=[]}let w=[...l,n].filter(t=>!!t).map(t=>Object.keys(t).filter(e=>!e.startsWith("_")&&e.includes(":"))).flat(),o=[...new Set(w)];return(!s.has("scripts")||s.get("scripts").length===0)&&s.set("scripts",o),{name:"yarn",description:"",subcommands:o.map(t=>({name:t,description:"",icon:"\u2728"}))}}},f=k;export{f as default};
